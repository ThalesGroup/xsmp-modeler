import { DeepPartial, inject, LangiumSharedCoreServices, Module } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumSharedServices } from 'langium/lsp';
import { XsmpGeneratedSharedModule, XsmpcatGeneratedModule, XsmpprojectGeneratedModule } from './generated/module.js';
import type { XsmpprojectServices } from './xsmpproject-module.js';
import { XsmpprojectModule } from './xsmpproject-module.js';
import { registerXsmpcatValidationChecks  } from './xsmpcat-validator.js';
import type { XsmpcatServices } from './xsmpcat-module.js';
import { XsmpcatModule } from './xsmpcat-module.js';
import { registerXsmpprojectValidationChecks } from './xsmpproject-validator.js';
import { XsmpWorkspaceManager } from './xsmp-workspace-manager.js';

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createXsmpServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    xsmpcat: XsmpcatServices,
    xsmpproject: XsmpprojectServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        XsmpGeneratedSharedModule,
        XsmpSharedModule
    );
    const xsmpcat = inject(
        createDefaultModule({ shared }),
        XsmpcatGeneratedModule,
        XsmpcatModule
    );
    const xsmpproject = inject(
        createDefaultModule({ shared }),
        XsmpprojectGeneratedModule,
        XsmpprojectModule
    );
    shared.ServiceRegistry.register(xsmpcat);
    shared.ServiceRegistry.register(xsmpproject);
    registerXsmpcatValidationChecks(xsmpcat);
    registerXsmpprojectValidationChecks(xsmpproject);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    return { shared, xsmpproject, xsmpcat };
}

export type XsmpSharedServices = LangiumSharedCoreServices;

export const XsmpSharedModule: Module<XsmpSharedServices, DeepPartial<XsmpSharedServices>> = {
    workspace: {
        WorkspaceManager: (services) => new XsmpWorkspaceManager(services)
    }
}