
import * as ast from '../../generated/ast.js';
import { AstNode } from 'langium';
import { XsmpUtils } from '../../utils/xsmp-utils.js';

function fqn(node: ast.NamedElement | ast.ReturnParameter, separator: string = '::'): string {
    let name = node.name ?? 'return';
    let parent = node.$container;

    while (ast.isNamespace(parent) || ast.isType(parent)) {
        name = `${parent.name}${separator}${name}`;
        parent = parent.$container;
    }
    return name;
}
function description(node: ast.NamedElement): string {
    return XsmpUtils.getDescription(node) ?? ''

}

export class ADocGenerator extends AbstractGenerator {


    private generateCatalogue(catalogue: ast.Catalogue): void {
        // Catalogue file
        const fileName = `${catalogue.name}-gen.adoc`;
        const catTitle = catalogue.title !== null ? catalogue.title : `Catalogue ${catalogue.name}`;

        fsa.generateFile(fileName, ADocOutputConfigurationProvider.DOC, `
            = ${catTitle}
            ++++
            ${description(catalogue)}
            ++++
            
            ${catalogue.elements.filter(n => n.elements.some(ast.isType)).map(namespace => this.generateNamespace(namespace)).join('\n')}
        `);
    }

    private generateNamespace(namespace: ast.Namespace): string {
        return `
            == Namespace ${fqn(namespace)}
            ++++
            ${description(namespace)}
            ++++
            ${this.generateMermaidNamespace(namespace)}
            
            ${namespace.elements.filter(ast.isType).map(type => this.generateType(type)).join('\n')}
        `;
    }

    private generateType(type: ast.Type): string {
        return `
            [#${fqn(type, '-')}]
            === ${type.$type} ${type.name}
            ++++
            ${description(type)}
            ++++
            
            .${type.name}'s informations
            [%autowidth.stretch]
            |===
            ${this.generateTypeInfoDetails(type)}
            |===
            
            ${this.generateMermaid(type)}
            
            ${this.generateContent(type)}
        `;
    }

    private generateMermaid(obj: AstNode): string {
        return '';
    }

    private generateMermaidComponent(component: ast.Component): string {
        const interfaces = component.interface;
        const base = component.base;
        const references = component.elements.filter(ast.isReference_);
        const containers = component.elements.filter(ast.isContainer);
        return `
            ==== Diagram
            
            [.center]
            [mermaid]
            ....
            classDiagram
                ${base?.ref !== undefined ? `class ${base.ref.name} { <<${base.ref.$type}>> }` : ''}
                
                ${interfaces.map(interf => `class ${interf.ref?.name} { <<${interf.ref?.$type}>> }`).join('\n')}
                
                ${references.map(ref => `class ${ref.interface.ref?.name} { <<${ref.$type}>> }`).join('\n')}
                
                ${containers.map(container => `class ${container.type.ref?.name} { <<${container.$type}>> }`).join('\n')}
                
                class ${component.name} {
                    ${this.mermaidClassAttributes(component)}
                }
                
                ${base?.ref !== undefined ? `${base.ref.name} <|-- ${component.name} : extends` : ''}
                ${interfaces.map(interf => `${interf.ref?.name} <|.. ${component.name} : implements`).join('\n')}
                ${references.map(ref => `${component.name} "${ref.lower}..${ref.upper}" o-- ${ref.interface.name} : ${ref.name}`).join('\n')}
                ${containers.map(container => `${component.name} "${container.lower}..${container.upper}" *-- ${container.type.name} : ${container.name}`).join('\n')}
            ....
        `;
    }

    private generateMermaidInterface(interf: ast.Interface): string {
        const base = interf.base;
        return `
            ==== Diagram
                        
            [.center]
            [mermaid]
            ....
            classDiagram
                ${base.map(b => `class ${b.name} { <<Interface>> }`).join('\n')}
            
                class ${interf.name} {
                    ${interf.mermaidClassAttributes}
                }
                
                ${base.map(b => `${b.name} <|-- ${interf.name} : extends`).join('\n')}
            ....
        `;
    }

    private generateMermaidStructure(structure: ast.Structure): string {
        return `
            ==== Diagram
                        
            [.center]
            [mermaid]
            ....
            classDiagram
                ${structure instanceof ast.Class && structure.base !== null ? `class ${structure.base.name} { <<${structure.base.eClass.name}>> }` : ''}
                
                class ${structure.name} {
                    ${structure.mermaidClassAttributes}
                }
                
                ${structure instanceof Class && structure.base !== null ? `${structure.base.name} <|-- ${structure.name}` : ''}
            ....
        `;
    }

    private generateMermaidMembers(obj: EObject): string {
        return '';
    }

    private generateMermaidField(field: ast.Field): string {
        return `${this.generateMermaidVisibility(field)}${field.type.name} ${field.name}`;
    }

    private generateMermaidEventSource(eventSource: ast.EventSource): string {
        return `+EventSource<${eventSource.type.ref?.name}> ${eventSource.name}`;
    }

    private generateMermaidEventSink(eventSink: ast.EventSink): string {
        return `+EventSink<${eventSink.type.ref?.name}> ${eventSink.name}`;
    }

    private generateMermaidEntryPoint(entryPoint: ast.EntryPoint): string {
        return `+EntryPoint ${entryPoint.name}`;
    }

    private generateMermaidConstant(constant: ast.Constant): string {
        return `${this.generateMermaidVisibility(constant)}constexpr ${constant.type.ref?.name} ${constant.name} = ${constant.value.shortValue}`;
    }

    private generateMermaidAssociation(association: ast.Association): string {
        return `${this.generateMermaidVisibility(association)}${association.type.ref?.name}* ${association.name}`;
    }

    private generateMermaidOperation(operation: ast.Operation): string {
        return `
            ${this.generateMermaidVisibility(operation)}${operation.name}(${operation.parameter.map(param => `${param.direction} ${param.type.ref?.name}`).join(', ')}) ${operation.returnParameter === null ? 'void' : operation.returnParameter.type.name}
        `;
    }

    private generateMermaidVisibility(elem: ast.VisibilityElement): string {
        switch (elem.realVisibility) {
            case VisibilityKind.PUBLIC: return '+';
            case VisibilityKind.PROTECTED: return '#';
            case VisibilityKind.PRIVATE: return '-';
            default: return '';
        }
    }


    private generateContentNamedElementWithMembers(element: ast.Structure | ast.ReferenceType): string {
        return `
            ${this.generateConstants(element)}
            
            ${this.generateProperties(element)}
            
            ${this.generateOperations(element)}
            
            ${this.generateEntryPoints(element)}
            
            ${this.generateEventSinks(element)}
            
            ${this.generateEventSources(element)}
            
            ${this.generateFields(element)}
            
            ${this.generateAssociations(element)}
            
            ${this.generateContainers(element)}
            
            ${this.generateReferences(element)}
        `;
    }

    private generateContentEnumeration(enumeration: ast.Enumeration): string {
        return `
            .${enumeration.name}'s literals
            [%autowidth.stretch]
            |===
            |Name |Value
            
            ${enumeration.literal.map(literal => `|${literal.name}|${literal.value.shortValue}`).join('\n')}
            |===
        `;
    }

    private generateFields(element: ast.Structure | ast.Component): string {
        const fields = element.elements.filter(ast.isField);
        return `
            ${fields.length > 0 ? `
                ==== Fields
                The ${element.name} ${element.$type.toLowerCase()} provides the following fields:
                
                ${VisibilityKind.values.map(v => this.generateFieldsWithVisibility(element, v)).join('\n')}
            ` : ''}
        `;
    }
    private getUnit(field: ast.Field): string | undefined {
        if (ast.isInteger(field.type.ref) || ast.isFloat(field.type.ref))
            return XsmpUtils.getUnit(field.type.ref)
        return undefined
    }

    private generateFieldsWithVisibility(element: ast.Structure | ast.Component, v: ast.VisibilityKind): string {
        const fields = element.elements.filter(ast.isField).filter(field => field.visibility === v);
        const hasUnit = fields.some(field => this.getUnit(field) !== undefined);
        const hasInitialValue = fields.some(field => field.default !== undefined);
        const hasDescription = fields.some(field => XsmpUtils.getDescription(field) !== undefined);
        const hasViewKind = fields.some(field => field.viewKind !== ViewKind.NONE);
        return `
            ${fields.length > 0 ? `
                .${element.name}'s ${v.getName()} fields
                [%autowidth.stretch]
                |===
                |Kind |Name |Type ${hasUnit ? '|Unit ' : ''}${hasViewKind ? '|View Kind ' : ''}${hasInitialValue ? '|Initial Value ' : ''}${hasDescription ? '|Description' : ''}
                
                ${fields.map(field => `
                    |${field.fieldKinds.join(', ')}
                    |${field.name}
                    |${field.type.crossReference(field)}
                    ${hasUnit ? `|${field.unit}` : ''}
                    ${hasViewKind ? `|${field.viewKind.label}` : ''}
                    ${hasInitialValue ? `|${field.default.shortValue}` : ''}
                    ${hasDescription ? `|${field.description?.escapeDescription}` : ''}
                `).join('\n')}
                |===
            ` : ''}
        `;
    }

    private generateConstants(element: ast.ReferenceType | ast.Structure): string {
        const constants = element.elements.filter(ast.isConstant);
        return `
            ${constants.length > 0 ? `
                ==== Constants
                The ${element.name} ${element.$type.toLowerCase()} provides the following constants:
                
                ${VisibilityKind.values.map(v => this.generateConstantsWithVisibility(element, v)).join('\n')}
            ` : ''}
        `;
    }

    private generateConstantsWithVisibility(element: ast.ReferenceType | ast.Structure, v: VisibilityKind): string {
        const constants = element.elements.filter(ast.isConstant).filter(constant => constant.visibility === v);
        return `
            ${constants.length > 0 ? `
                .${element.name}'s ${v.getName()} constants
                [%autowidth.stretch]
                |===
                |Kind |Name |Type |Initial Value |Description
                
                ${constants.map(constant => `
                    |${constant.constantKind.label}
                    |${constant.name}
                    |${constant.type.crossReference(constant)}
                    |${constant.default.shortValue}
                    |${constant.description?.escapeDescription}
                `).join('\n')}
                |===
            ` : ''}
        `;
    }

    private generateContainers(element: ast.Component): string {
        const containers = element.elements.filter(ast.isContainer);
        return `
            ${containers.length > 0 ? `
                ==== Containers
                The ${element.name} ${element.$type.toLowerCase()} provides the following containers:
                
                .${element.name}'s containers
                [%autowidth.stretch]
                |===
                |Name |Kind |Lower Bound |Upper Bound |Type |Description
                
                ${containers.map(container => `
                    |${container.name}
                    |${container.containerKind.label}
                    |${container.lowerBound.shortValue}
                    |${container.upperBound.shortValue}
                    |${container.type.crossReference(container)}
                    |${container.description?.escapeDescription}
                `).join('\n')}
            ` : ''}
        `;
    }

    private generateContainersWithVisibility(element: NamedElementWithMembers, v: VisibilityKind): string {
        const containers = element.member.filter(ast.isContainer)
        return `
            ${containers.length > 0 ? `
                .${element.name}'s ${v.getName()} containers
                [%autowidth.stretch]
                |===
                |Name |Kind |Lower Bound |Upper Bound |Type |Description
                
                ${containers.map(container => `
                    |${container.name}
                    |${container.containerKind.label}
                    |${container.lowerBound.shortValue}
                    |${container.upperBound.shortValue}
                    |${container.type.crossReference(container)}
                    |${container.description?.escapeDescription}
                `).join('\n')}
                |===
            ` : ''}
        `;
    }

    private generateReferences(element: NamedElementWithMembers): string {
        const references = element.member.filter(Reference);
        return `
            ${references.length > 0 ? `
                ==== References
                The ${element.name} ${element.eClass.name.toLowerCase()} provides the following references:
                
                ${VisibilityKind.values.map(v => this.generateReferencesWithVisibility(element, v)).join('\n')}
            ` : ''}
        `;
    }

    private generateReferencesWithVisibility(element: NamedElementWithMembers, v: VisibilityKind): string {
        const references = element.member.filter(Reference).filter(reference => reference.visibility === v);
        return `
            ${references.length > 0 ? `
                .${element.name}'s ${v.getName()} references
                [%autowidth.stretch]
                |===
                |Name |Lower Bound |Upper Bound |Type |Description
                
                ${references.map(reference => `
                    |${reference.name}
                    |${reference.lowerBound.shortValue}
                    |${reference.upperBound.shortValue}
                    |${reference.type.crossReference(reference)}
                    |${reference.description?.escapeDescription}
                `).join('\n')}
                |===
            ` : ''}
        `;
    }

    private generateOperations(element: NamedElementWithMembers): string {
        const operations = element.member.filter(Operation);
        return `
            ${operations.length > 0 ? `
                ==== Operations
                The ${element.name} ${element.eClass.name.toLowerCase()} provides the following operations:
                
                ${VisibilityKind.values.map(v => this.generateOperationsWithVisibility(element, v)).join('\n')}
            ` : ''}
        `;
    }

    private generateOperationsWithVisibility(element: NamedElementWithMembers, v: VisibilityKind): string {
        const operations = element.member.filter(Operation).filter(operation => operation.visibility === v);
        return `
            ${operations.length > 0 ? `
                .${element.name}'s ${v.getName()} operations
                [%autowidth.stretch]
                |===
                |Name |Direction |Parameter |Type |View Kind |Description
                
                ${operations.map(operation => `
                    |${operation.name}
                    |${operation.parameter.map(param => param.direction).join(', ')}
                    |${operation.parameter.map(param => param.type.crossReference(param)).join(', ')}
                    |${operation.returnParameter !== null ? operation.returnParameter.type.crossReference(operation.returnParameter) : 'void'}
                    |${operation.viewKind.label}
                    |${operation.description?.escapeDescription}
                `).join('\n')}
                |===
            ` : ''}
        `;
    }

    private generateEventSinks(element: NamedElementWithMembers): string {
        const eventSinks = element.member.filter(EventSink);
        return `
            ${eventSinks.length > 0 ? `
                ==== Event Sinks
                The ${element.name} ${element.eClass.name.toLowerCase()} provides the following event sinks:
                
                ${VisibilityKind.values.map(v => this.generateEventSinksWithVisibility(element, v)).join('\n')}
            ` : ''}
        `;
    }

    private generateEventSinksWithVisibility(element: NamedElementWithMembers, v: VisibilityKind): string {
        const eventSinks = element.member.filter(EventSink).filter(eventSink => eventSink.visibility === v);
        return `
            ${eventSinks.length > 0 ? `
                .${element.name}'s ${v.getName()} event sinks
                [%autowidth.stretch]
                |===
                |Name |Type |Description
                
                ${eventSinks.map(eventSink => `
                    |${eventSink.name}
                    |${eventSink.type.crossReference(eventSink)}
                    |${eventSink.description?.escapeDescription}
                `).join('\n')}
                |===
            ` : ''}
        `;
    }

    private generateEventSources(element: NamedElementWithMembers): string {
        const eventSources = element.member.filter(EventSource);
        return `
            ${eventSources.length > 0 ? `
                ==== Event Sources
                The ${element.name} ${element.eClass.name.toLowerCase()} provides the following event sources:
                
                ${VisibilityKind.values.map(v => this.generateEventSourcesWithVisibility(element, v)).join('\n')}
            ` : ''}
        `;
    }

    private generateEventSourcesWithVisibility(element: NamedElementWithMembers, v: VisibilityKind): string {
        const eventSources = element.member.filter(EventSource).filter(eventSource => eventSource.visibility === v);
        return `
            ${eventSources.length > 0 ? `
                .${element.name}'s ${v.getName()} event sources
                [%autowidth.stretch]
                |===
                |Name |Type |Description
                
                ${eventSources.map(eventSource => `
                    |${eventSource.name}
                    |${eventSource.type.crossReference(eventSource)}
                    |${eventSource.description?.escapeDescription}
                `).join('\n')}
                |===
            ` : ''}
        `;
    }

    private generateEntryPoints(element: NamedElementWithMembers): string {
        const entryPoints = element.member.filter(EntryPoint);
        return `
            ${entryPoints.length > 0 ? `
                ==== Entry Points
                The ${element.name} ${element.eClass.name.toLowerCase()} provides the following entry points:
                
                ${VisibilityKind.values.map(v => this.generateEntryPointsWithVisibility(element, v)).join('\n')}
            ` : ''}
        `;
    }

    private generateEntryPointsWithVisibility(element: NamedElementWithMembers, v: VisibilityKind): string {
        const entryPoints = element.member.filter(EntryPoint).filter(entryPoint => entryPoint.visibility === v);
        return `
            ${entryPoints.length > 0 ? `
                .${element.name}'s ${v.getName()} entry points
                [%autowidth.stretch]
                |===
                |Name |Description
                
                ${entryPoints.map(entryPoint => `
                    |${entryPoint.name}
                    |${entryPoint.description?.escapeDescription}
                `).join('\n')}
                |===
            ` : ''}
        `;
    }

    private generateProperties(element: NamedElementWithMembers): string {
        const properties = element.member.filter(Property);
        return `
            ${properties.length > 0 ? `
                ==== Properties
                The ${element.name} ${element.eClass.name.toLowerCase()} provides the following properties:
                
                ${VisibilityKind.values.map(v => this.generatePropertiesWithVisibility(element, v)).join('\n')}
            ` : ''}
        `;
    }

    private generatePropertiesWithVisibility(element: NamedElementWithMembers, v: VisibilityKind): string {
        const properties = element.member.filter(Property).filter(property => property.visibility === v);
        const hasUnit = properties.some(property => property.unit !== null);
        const hasInitialValue = properties.some(property => property.default !== null);
        const hasDescription = properties.some(property => property.description !== null && property.description !== '');
        return `
            ${properties.length > 0 ? `
                .${element.name}'s ${v.getName()} properties
                [%autowidth.stretch]
                |===
                |Name |Type ${hasUnit ? '|Unit ' : ''}${hasInitialValue ? '|Initial Value ' : ''}${hasDescription ? '|Description' : ''}
                
                ${properties.map(property => `
                    |${property.name}
                    |${property.type.crossReference(property)}
                    ${hasUnit ? `|${property.unit}` : ''}
                    ${hasInitialValue ? `|${property.default.shortValue}` : ''}
                    ${hasDescription ? `|${property.description?.escapeDescription}` : ''}
                `).join('\n')}
                |===
            ` : ''}
        `;
    }


}
